benchmark data:
Run 1:
  std::execution::seq      : 7017.45 ms
  std::execution::par      : 5481.59 ms
  std::execution::par_unseq: 5380.31 ms

Run 2:
  std::execution::seq      : 6926.39 ms
  std::execution::par      : 5505.45 ms
  std::execution::par_unseq: 5700.80 ms

Run 3:
  std::execution::seq      : 7029.72 ms
  std::execution::par      : 5000.85 ms
  std::execution::par_unseq: 5191.20 ms

Run 4:
  std::execution::seq      : 6931.13 ms
  std::execution::par      : 5486.58 ms
  std::execution::par_unseq: 5579.06 ms

Run 5:
  std::execution::seq      : 6831.59 ms
  std::execution::par      : 5871.41 ms
  std::execution::par_unseq: 5789.83 ms

=== SUMMARY ===
Average times over 5 runs:
  std::execution::seq      : 6947.26 ms
  std::execution::par      : 5469.17 ms
  std::execution::par_unseq: 5528.24 ms

Speedups compared to sequential:
  std::execution::par      : 1.27x
  std::execution::par_unseq: 1.26x

The results show that parallel execution policies provide performance benefits over sequential execution:
- Both parallel policies provided significant performance improvements over sequential execution, reducing sorting time by approximately 21-23%.
- Interestingly, there was very little difference between par and par_unseq policies (with par actually being slightly faster on average)
    - The hardware or compiler (I ran on the CS linux server) might not be fully optimizing for SIMD instructions that par_unseq is designed to exploit
    - The sorting algorithm's memory access patterns may not be conducive to effective vectorization
    - TBB's implementation might be prioritizing task parallelism over vectorization
- The sequential runs showed remarkable consistency, while parallel runs showed slightly more variability, which is expected due to threading overhead and scheduling differences.
- The 1.27x speedup is less than what might be expected on a modern multi-core processor. This could be due to limited memory bandwidth as sorting is often memory-bound, or the overhead of task creation and synchronization. 