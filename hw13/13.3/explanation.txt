key changes I made:

SharedState::notify():
- Kept memory_order_release for ready.store(true) to ensure all prior writes are visible
- Changed notifier.test_and_set() to use memory_order_relaxed instead of memory_order_release since the synchronization is already handled by the ready flag

SharedState::wait():
- Changed consumer_waiting.store() to use memory_order_relaxed since we're just recording state, not synchronizing
- Kept memory_order_acquire for ready.load() and notifier.wait() to ensure proper synchronization with notify()


MyPromise::set_value() and set_exception():
- Changed ready.load() to use memory_order_relaxed since we're just checking state, not synchronizing. The actual synchronization happens in notify() with its release semantics


MyPromise::has_consumer():
Changed to use memory_order_relaxed since we're only reading state


Kept memory_order_acquire in is_ready(). This ensures that if ready is true, we also see any updates to the shared value. 
